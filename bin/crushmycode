#!/usr/bin/env python3

import argparse
import logging
import os
from pathlib import Path
import subprocess
from typing import cast

from btdcore.logging import setup_logging
from minikg.models import MiniKgConfig

setup_logging()

from crushmycode.cli import (
    CMCArgsShowGraph,
    CMCArgsBuild,
    parse_cli_args,
)
from crushmycode.codereport import CodeReportBuilder
from crushmycode.graph_viz import draw_communities_graph

from minikg.presets.code import KgApiCode, subprocess



def main() -> None:
    args = parse_cli_args()
    command = args.__class__.get_command_name()

    if command == "build":
        args = cast(CMCArgsBuild, args)
        local_path = args.repo_url
        github_url = ""
        if not Path(local_path).exists():
            github_url = local_path
            local_path = ""
            pass
        kgapi = KgApiCode()
        minikgconfig: MiniKgConfig = kgapi.build_kg(
            ignore_file_exps=args.ignore_files,
            input_file_exps=args.input_files,
            github_url=github_url,
            local_dir=local_path,
        )
        with open(minikgconfig.persist_dir / "code-path.txt", "w") as f:
            f.write(str(minikgconfig.input_dir))
            pass
        return

    if command == "show-graph":
        args = cast(CMCArgsShowGraph, args)
        if not Path(args.cache_path).exists():
            raise Exception(f"cache path '{args.cache_path}' does not exist")
        kgapi = KgApiCode()
        pkg = kgapi.load_kg_package(
            cache_dir=args.cache_path
        )
        viz_fname = "".join([
            os.path.split(args.cache_path)[-1],
            ".html",
        ])
        logging.info("drawing code graph to '%s'", viz_fname)
        draw_communities_graph(
            groups=pkg.cluster_groups,
            communities=pkg.communities,
            com_summaries=pkg.summaries_by_id,
            node_details_by_id=dict(pkg.G.nodes),
            outfile_name=viz_fname,
            include_nodes=args.show_nodes,
        )
        subprocess.call(
            [
                "open",
                viz_fname,
            ]
        )
        return

    if command == "report":
        args = cast(CMCArgsShowGraph, args)
        if not Path(args.cache_path).exists():
            raise Exception(f"cache path '{args.cache_path}' does not exist")
        code_path: str
        with open(Path(args.cache_path) / "code-path.txt", "r") as f:
            code_path = f.read().strip()
            pass
        kgapi = KgApiCode()
        pkg = kgapi.load_kg_package(
            cache_dir=args.cache_path
        )
        report_fname = "".join([
            os.path.split(args.cache_path)[-1],
            ".md",
        ])
        report_builder = CodeReportBuilder(
            code_base_path=code_path,
            pkg=pkg,
        )
        report = report_builder.build_report()
        logging.info("writing report to '%s'", report_fname)
        with open(report_fname, "w") as f:
            f.write(report)
            pass
        return

    return


if __name__ == "__main__":
    main()
